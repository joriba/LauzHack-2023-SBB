from typing import Any, Dict, List, Type, TypeVar, Union

from attrs import define as _attrs_define
from attrs import field as _attrs_field

from ..types import UNSET, Unset

T = TypeVar("T", bound="Problem")


@_attrs_define
class Problem:
    """Zalando like error-object if not HttpStatus 2xx (see [RFC-7807](https://tools.ietf.org/html/rfc7807)). Check for:
    Content-Type=application/problem+json

        Attributes:
            status (int): The HTTP status code generated by the origin server for this occurrence of the problem. Example:
                500.
            title (str): A short, summary of the problem type. Written in english and readable for engineers (usually not
                suited for non technical stakeholders and not localized). Example: Service Unavailable.
            detail (str): A human readable explanation specific to this occurrence of the problem.
            type (str): An absolute URI that identifies the problem type.  When dereferenced, it SHOULD provide human-
                readable documentation for the problem type (e.g., using HTML). Default:
                'https://github.com/SchweizerischeBundesbahnen/journey-service/blob/master/Problem-Manual.md'.
            instance (Union[Unset, str]): An absolute URI that identifies the specific occurrence of the problem. It may or
                may not yield further information if dereferenced. Example: /v3/places/8507000.
            trace_id (Union[Unset, str]): The `trace-id` according to the [W3C tracing
                standard](https://www.w3.org/TR/trace-context/#traceparent-header). (Might be useful for support-cases with the
                operations teams.)
    """

    status: int
    title: str
    detail: str
    type: str = "https://github.com/SchweizerischeBundesbahnen/journey-service/blob/master/Problem-Manual.md"
    instance: Union[Unset, str] = UNSET
    trace_id: Union[Unset, str] = UNSET
    additional_properties: Dict[str, Any] = _attrs_field(init=False, factory=dict)

    def to_dict(self) -> Dict[str, Any]:
        status = self.status
        title = self.title
        detail = self.detail
        type = self.type
        instance = self.instance
        trace_id = self.trace_id

        field_dict: Dict[str, Any] = {}
        field_dict.update(self.additional_properties)
        field_dict.update(
            {
                "status": status,
                "title": title,
                "detail": detail,
                "type": type,
            }
        )
        if instance is not UNSET:
            field_dict["instance"] = instance
        if trace_id is not UNSET:
            field_dict["traceId"] = trace_id

        return field_dict

    @classmethod
    def from_dict(cls: Type[T], src_dict: Dict[str, Any]) -> T:
        d = src_dict.copy()
        status = d.pop("status")

        title = d.pop("title")

        detail = d.pop("detail")

        type = d.pop("type")

        instance = d.pop("instance", UNSET)

        trace_id = d.pop("traceId", UNSET)

        problem = cls(
            status=status,
            title=title,
            detail=detail,
            type=type,
            instance=instance,
            trace_id=trace_id,
        )

        problem.additional_properties = d
        return problem

    @property
    def additional_keys(self) -> List[str]:
        return list(self.additional_properties.keys())

    def __getitem__(self, key: str) -> Any:
        return self.additional_properties[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.additional_properties[key] = value

    def __delitem__(self, key: str) -> None:
        del self.additional_properties[key]

    def __contains__(self, key: str) -> bool:
        return key in self.additional_properties
